# Working in SQLite to analyze Spotify data that I downloaded from Kaggle.
 
# Creating the table for the data:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )


# After inserting the data I preformed analytics on the data to discover information such as the most popular songs: 

SELECT artist_name,
       track_name
  FROM BIT_DB.Spotifydata
 ORDER BY popularity DESC
 LIMIT 10;
 
 
# Next I made queries to find the ranking of the most popular songs.

SELECT dense_rank() OVER (ORDER BY popularity DESC) AS top_songs,
       artist_name,
       track_name,
       popularity
  FROM BIT_DB.Spotifydata
 WHERE popularity > 90;

# Finally after gathering information on the average and max duration of the tracks I preformed a query with a case expression to categorize the duration as 
# either short, medium or long.

Select 
artist_name,
track_name,
duration_ms,
case
when duration_ms < 177488.4 then 'short'
when duration_ms > 177488.4 and duration_ms < 227120 then 'medium'
else 'long'
end song_length
FROM BIT_DB.Spotifydata
order by duration_ms;
